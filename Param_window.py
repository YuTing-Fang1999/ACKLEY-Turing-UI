# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np


class Param_window(QtWidgets.QMainWindow):
    def __init__(self, popsize=15, param_change_num=7, ans=[0]*7):
        super().__init__()
        self.popsize = popsize
        self.param_change_num = param_change_num
        self.ans = ans
        self.move(100, 100)

        self.fitness = [-1]*popsize
        self.label_param_value = []
        self.label_score = []

        self.setWindowTitle("param window")
        self.resize(0, 0)
        self.centralwidget = QtWidgets.QWidget(self)
        self.verticalLayout_parent = QtWidgets.QVBoxLayout(self.centralwidget)
        self.gridLayout = QtWidgets.QGridLayout()

        label = QtWidgets.QLabel(self.centralwidget)
        label.setText("param value")
        label.setStyleSheet("background-color: rgb(0, 51, 102);")
        label.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(label, 0, 0, 1, param_change_num)

        label = QtWidgets.QLabel(self.centralwidget)
        label.setText("score")
        label.setStyleSheet("background-color: rgb(0, 51, 102);")
        label.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout.addWidget(label, 0, param_change_num, 1, 1)

        for i in range(popsize):
            label_param_value = []
            for j in range(param_change_num):
                label = QtWidgets.QLabel(self.centralwidget)
                label.setAlignment(QtCore.Qt.AlignCenter)
                label_param_value.append(label)
                self.gridLayout.addWidget(label, i+1, j, 1, 1)
            self.label_param_value.append(label_param_value)

        for i in range(popsize):
            label = QtWidgets.QLabel(self.centralwidget)
            label.setAlignment(QtCore.Qt.AlignCenter)
            self.gridLayout.addWidget(label, i+1, param_change_num, 1, 1)
            self.label_score.append(label)

        self.gridLayout.setColumnStretch(1, 1)
        self.gridLayout.setColumnStretch(2, 1)
        self.gridLayout.setColumnStretch(3, 1)
        self.gridLayout.setColumnStretch(4, 1)
        self.verticalLayout_parent.addLayout(self.gridLayout)
        self.setCentralWidget(self.centralwidget)

        self.setStyleSheet("QMainWindow {background-color: rgb(54, 69, 79);}"
                           """
                                QLabel {
                                    font-size:10pt; font-family:微軟正黑體; font-weight: bold;
                                    color: white;
                                    border: 1px solid black;
                                    padding: 3px;
                                }
                                """
                           """
                                QToolTip { 
                                    background-color: black; 
                                    border: black solid 1px
                                }
                                """
                           )

    def update(self, idx, param_value, score):
        self.fitness[idx] = score
        self.label_score[idx].setText(str(np.round(score, 9)))
        color = 255*(1-np.abs(param_value-self.ans))
        for i in range(self.param_change_num):
            self.label_param_value[idx][i].setText(str(param_value[i]))
            self.label_param_value[idx][i].setStyleSheet(
                "color: rgb(255, {}, 255)".format(color[i]))

        order = np.argsort(self.fitness)
        # print(order)
        color = 255 - np.arange(0, 150, 150/self.popsize)
        # print(color)
        print()
        for i, c in zip(order, color):
            self.label_score[i].setStyleSheet(
                "color: rgb({0}, {0}, {0})".format(c))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    popsize = 15
    param_change_num = 7
    w = Param_window(popsize=15, param_change_num=7)
    pop = np.random.rand(popsize, param_change_num)
    for i in range(popsize):
        w.update(i, pop[i], np.random.rand())
    w.show()
    sys.exit(app.exec_())
